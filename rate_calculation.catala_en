```catala

declaration scope WithoutPriority:
  input income content money
  input nb_children content integer
  output tax_rate content decimal

scope WithoutPriority:

  # (a) The tax rate shall equal 20%, except as otherwise specified in this section.
  definition tax_rate equals 20%

  # (b) For any family with three or more children, the tax rate shall equal 15%.
  label number_of_children_exception
  exception definition tax_rate under condition nb_children >= 3
  consequence equals 15%

  # (c) For any family with income of $10,000 or less, the tax rate shall equal 10%.
  label low_income_exception
  exception definition tax_rate under condition income <= $10,000
  consequence equals 10%


declaration scope SampleComputationWithoutPriority:
  output computation content WithoutPriority

scope SampleComputationWithoutPriority:
  definition computation equals output of WithoutPriority with
  {  -- income: $5000 --  nb_children: 4  }

declaration scope TestWithoutPriority:
  s scope WithoutPriority
  input income content money
  input nb_children content integer
  output tax_rate content decimal

scope TestWithoutPriority:
  assertion (income > $100)
  definition s.income equals income
  definition s.nb_children equals nb_children
  definition tax_rate equals s.tax_rate


declaration scope LowIncomePriority:
  input income content money
  input nb_children content integer
  output tax_rate content decimal

scope LowIncomePriority:

  definition tax_rate equals 20%

  label number_of_children_exception
  exception definition tax_rate under condition nb_children >= 3
  consequence equals 15%

  label low_income_exception
  exception number_of_children_exception
    definition tax_rate under condition income <= $10,000
  consequence equals 10%

declaration scope ChildrenPriority:
  input income content money
  input nb_children content integer
  output tax_rate content decimal


scope ChildrenPriority:

  definition tax_rate equals 20%

  label low_income_exception
  exception
    definition tax_rate under condition income <= $10,000
  consequence equals 10%

  label number_of_children_
  exception low_income_exception
  definition tax_rate under condition nb_children >= 3
  consequence equals 15%


declaration scope SampleWithLowIncomePriority:
  output computation content LowIncomePriority

scope SampleWithLowIncomePriority:
  definition computation equals output of LowIncomePriority with
  {  -- income: $5000 --  nb_children: 4  }


declaration scope ForceChoice:
    input income content money
    input nb_children content integer
    input children_exception_dominates content boolean
    output tax_rate content decimal

scope ForceChoice:

    definition tax_rate equals
      if children_exception_dominates
          then let interim_output equals output of ChildrenPriority with { -- income : income -- nb_children : nb_children } in interim_output.tax_rate
      else let interim_output equals output of LowIncomePriority with  { -- income : income -- nb_children : nb_children } in interim_output.tax_rate


  declaration scope SampleForceChoice:
    output computation content ForceChoice

  scope SampleForceChoice:
    definition computation equals output of ForceChoice with
   { -- income: $5000
     --  nb_children: 4
     -- children_exception_dominates : false}




```
